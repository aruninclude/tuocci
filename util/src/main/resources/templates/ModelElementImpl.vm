/*
 * This file is part of tuOCCI.
 *
 *     tuOCCI is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as
 *     published by the Free Software Foundation, either version 3 of
 *     the License, or (at your option) any later version.
 *
 *     tuOCCI is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with tuOCCI.  If not, see <http://www.gnu.org/licenses/>.
 */

package ${packageName};

import de.irf.it.tuocci.model.representation.Attribute;
import de.irf.it.tuocci.model.representation.Category;
import de.irf.it.tuocci.model.representation.ModelElement;

import java.net.URI;

#set($occiKind = "de.irf.it.tuocci.model.annotations.Kind")
#set($occiMixin = "de.irf.it.tuocci.model.annotations.Mixin")
#set($occiAction = "de.irf.it.tuocci.model.annotations.Action")
public class ${elementName}${baseName} implements ModelElement {

    private static ModelElement instance;

    public static ModelElement getInstance() {
        if(instance == null) {
            instance = new ${elementName}${baseName}();
        } // if
        return instance;
    }

    private Type modelType =
        #if(${occiClass} == ${occiKind})
            Type.KIND;
        #elseif(${occiClass} == ${occiMixin})
            Type.MIXIN;
        #elseif(${occiClass} == ${occiAction})
            Type.ACTION;
        #end

    private final Category category = new Category(
            URI.create("${occiCategory.scheme()}"),
            "${occiCategory.term()}",
            "${occiCategory.title()}"
    );

    private final ModelElement[] related = new ModelElement[]{
    #foreach(${r} in ${occiRelated})
        ${r}${baseName}.getInstance()#if(${velocityHasNext}),#end
    #end
    };

    private final Attribute[] attributes = {
    #foreach(${a} in ${occiAttributes})
        new Attribute("${a.name()}", ${a.required()}, ${a.mutable()})#if(${velocityHasNext}),#end
    #end
    };

    private final ModelElement[] actions = {
    #foreach(${a} in ${occiActions})
        ${a}${baseName}.getInstance()#if(${velocityHasNext}),#end
    #end
    };

    @Override
    public Type getModelType() {
        return this.modelType;
    }

    @Override
    public Category getCategory() {
        return this.category;
    }

    @Override
    public ModelElement[] getRelated() {
        return this.related;
    }

    @Override
    public Attribute[] getAttributes() {
        return this.attributes;
    }

    @Override
    public ModelElement[] getActions() {
        return this.actions;
    }
}